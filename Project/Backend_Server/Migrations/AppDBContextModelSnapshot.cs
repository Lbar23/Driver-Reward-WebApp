// <auto-generated />
using System;
using Backend_Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend_Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend_Server.Models.About", b =>
                {
                    b.Property<DateOnly>("Release")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("(CURRENT_DATE)")
                        .HasComment("Release date of the current version of the program.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("Description of the program.");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("Name of the program.");

                    b.Property<int>("Team")
                        .HasColumnType("int")
                        .HasDefaultValue(16)
                        .HasComment("Team number responsible for the project. Immutable.");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasComment("Current version of the program.");

                    b.HasKey("Release");

                    b.ToTable("About", (string)null);

                    b.HasData(
                        new
                        {
                            Release = new DateOnly(2024, 9, 9),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 1
                        },
                        new
                        {
                            Release = new DateOnly(2024, 9, 16),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 2
                        },
                        new
                        {
                            Release = new DateOnly(2024, 9, 23),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 3
                        },
                        new
                        {
                            Release = new DateOnly(2024, 9, 30),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 4
                        },
                        new
                        {
                            Release = new DateOnly(2024, 10, 7),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 5
                        },
                        new
                        {
                            Release = new DateOnly(2024, 10, 14),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 6
                        },
                        new
                        {
                            Release = new DateOnly(2024, 10, 21),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 7
                        },
                        new
                        {
                            Release = new DateOnly(2024, 10, 28),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 8
                        },
                        new
                        {
                            Release = new DateOnly(2024, 11, 4),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 9
                        },
                        new
                        {
                            Release = new DateOnly(2024, 11, 11),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 10
                        },
                        new
                        {
                            Release = new DateOnly(2024, 11, 18),
                            Description = "Our Program, GitGud Drivers, empowers companies in the trucking industry to reward positive driver behavior with redeemable points.",
                            Product = "GitGud Drivers",
                            Team = 16,
                            Version = 11
                        });
                });

            modelBuilder.Entity("Backend_Server.Models.AccountActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountActivity", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.AuditLogs", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("ActionSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdditionalDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(1000)")
                        .HasDefaultValue("");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("Category");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.Authentications", b =>
                {
                    b.Property<int>("AuthID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AuthID"));

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AuthID");

                    b.HasIndex("UserID");

                    b.ToTable("Authentications", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.DrSalesDetail", b =>
                {
                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetSalesDriverDetail");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.DrSalesSummary", b =>
                {
                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PurchaseCount")
                        .HasColumnType("int");

                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetSalesByDriver");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.DriverPoints", b =>
                {
                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<int>("PointsChanged")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SponsorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetDriverPointTracking");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.InvoiceDetail", b =>
                {
                    b.Property<decimal>("DriverFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PurchaseCount")
                        .HasColumnType("int");

                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPurchaseValue")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetInvoiceReport");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.SpSalesDetail", b =>
                {
                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetSalesSponsorDetail");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.SpSalesSummary", b =>
                {
                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalDrivers")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable((string)null);

                    b.ToFunction("sp_GetSalesSponsorSummary");
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.ViewAdminsDto", b =>
                {
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable((string)null);

                    b.ToView("vw_Admins", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.ViewDriversDto", b =>
                {
                    b.Property<int>("DriverPoints")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MilestoneLevel")
                        .HasColumnType("int");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<string>("SponsorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable((string)null);

                    b.ToView("vw_Drivers", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.DTO.ViewSponsorUsersDto", b =>
                {
                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PointDollarValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<string>("SponsorType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable((string)null);

                    b.ToView("vw_SponsorUsers", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.DriverApplications", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<DateOnly>("ApplyDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessReason")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("ProcessedDate")
                        .HasColumnType("DATE");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("ApplyDate");

                    b.HasIndex("Status");

                    b.HasIndex("SponsorID", "UserID");

                    b.ToTable("DriverApplications", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.FeedbackForms", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FeedbackCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FeedbackID");

                    b.HasIndex("Email");

                    b.HasIndex("FeedbackCategory");

                    b.HasIndex("SubmissionDate");

                    b.ToTable("FeedbackForms", (string)null);

                    b.HasData(
                        new
                        {
                            FeedbackID = 1,
                            Comments = "It would be great to have more achievments to earn.",
                            Email = "alice@example.com",
                            FeedbackCategory = "Suggestion",
                            FirstName = "Alice",
                            SubmissionDate = new DateTime(2024, 12, 4, 7, 50, 48, 564, DateTimeKind.Utc).AddTicks(5837)
                        },
                        new
                        {
                            FeedbackID = 2,
                            Comments = "The dashboard takes too long to load.",
                            Email = "bob@example.com",
                            FeedbackCategory = "BugReport",
                            FirstName = "Bob",
                            SubmissionDate = new DateTime(2024, 12, 4, 7, 50, 48, 564, DateTimeKind.Utc).AddTicks(5839)
                        },
                        new
                        {
                            FeedbackID = 3,
                            Comments = "The new design is fantastic. Keep it up!",
                            Email = "charlie@example.com",
                            FeedbackCategory = "Compliment",
                            FirstName = "Charlie",
                            SubmissionDate = new DateTime(2024, 12, 4, 7, 50, 48, 564, DateTimeKind.Utc).AddTicks(5840)
                        },
                        new
                        {
                            FeedbackID = 4,
                            Comments = "The points system feels unfair. Please adjust.",
                            Email = "dana@example.com",
                            FeedbackCategory = "Complaint",
                            FirstName = "Dana",
                            SubmissionDate = new DateTime(2024, 12, 4, 7, 50, 48, 564, DateTimeKind.Utc).AddTicks(6282)
                        });
                });

            modelBuilder.Entity("Backend_Server.Models.NotificationHistory", b =>
                {
                    b.Property<int>("InstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InstanceID"));

                    b.Property<DateTime>("NotifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp of when the notification was attempted.");

                    b.Property<int?>("NotifyTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the notification was successfully sent (true) or failed (false).");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("InstanceID");

                    b.HasIndex("NotifyDate")
                        .HasDatabaseName("IX_NotificationHistory_NotifyDate");

                    b.HasIndex("NotifyTypeID")
                        .HasDatabaseName("IX_NotificationHistory_NotifyTypeID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_NotificationHistory_UserID");

                    b.ToTable("NotificationHistory", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.NotifyTypes", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("Category of notification, such as TwoFA, Purchase, PointsChange, etc.");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Optional description of the notification type.");

                    b.Property<string>("EmailTemplateID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("SendGrid template ID for email notifications.");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the notification type is currently active.");

                    b.Property<string>("TemplateFieldsJson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(1000)")
                        .HasDefaultValue("[]")
                        .HasComment("JSON array defining expected dynamic fields for templates.");

                    b.HasKey("TypeID");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_NotifyTypes_Category");

                    b.ToTable("NotifyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TypeID = 1,
                            Category = "Auth",
                            Description = "Authentication code notification",
                            EmailTemplateID = "d-16815c0473d948acb2715a5001907e8c",
                            IsActive = true,
                            TemplateFieldsJson = "[\"auth_code\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 2,
                            Category = "Purchase",
                            Description = "Purchase confirmation notification",
                            EmailTemplateID = "d-69ac862108b441d6b289875f5365c4d3",
                            IsActive = true,
                            TemplateFieldsJson = "[\"cart_items\", \"cart_price\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 3,
                            Category = "PointsChange",
                            Description = "Notification for point changes",
                            EmailTemplateID = "d-0c016d5246e447d5873163bb0f9138b8",
                            IsActive = true,
                            TemplateFieldsJson = "[\"new_balance\", \"status_msg\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 4,
                            Category = "SystemChange",
                            Description = "System or Sponsor account changes notification (includes account removal)",
                            EmailTemplateID = "d-8c3f3751f36a40a4820b5d14cd056386",
                            IsActive = true,
                            TemplateFieldsJson = "[\"message\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 5,
                            Category = "AppStatus",
                            Description = "Driver application status notification",
                            EmailTemplateID = "d-b6f2e28c32e748ddafeab97761e74bb9",
                            IsActive = true,
                            TemplateFieldsJson = "[\"status\", \"status_message\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 6,
                            Category = "OrderIssue",
                            Description = "Order update or issue notification",
                            EmailTemplateID = "d-f966dff0b760434f871016a1a9761600",
                            IsActive = true,
                            TemplateFieldsJson = "[\"order_id\", \"issue_details\", \"user_name\"]"
                        },
                        new
                        {
                            TypeID = 7,
                            Category = "PointsReport",
                            Description = "Summary points report",
                            EmailTemplateID = "d-972ccaa0eb9b427ea96436f8fd1af7c7",
                            IsActive = true,
                            TemplateFieldsJson = "[\"report_date\", \"total_points\", \"details\"]"
                        });
                });

            modelBuilder.Entity("Backend_Server.Models.PointTransactions", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PointsChanged")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("SponsorID", "UserID")
                        .HasDatabaseName("IX_PointTransactions_SponsorDriver");

                    b.ToTable("PointTransactions", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.Products", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<bool>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Indicates whether the product is currently available for purchase.");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("The category the product belongs to.");

                    b.Property<decimal>("CurrencyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The monetary price of the product.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("Parsed description of the product.");

                    b.Property<string>("ExternalID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("External ID used to track the product from the external source, eBay API.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("The URL for the product's primary image.");

                    b.Property<int>("PriceInPoints")
                        .HasColumnType("int")
                        .HasComment("The equivalent price of the product in points.");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("The name of the product.");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("SponsorID");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.PurchaseProducts", b =>
                {
                    b.Property<int>("PurchaseID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("PointsSpent")
                        .HasColumnType("int");

                    b.Property<string>("PurchasedProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("PurchasedUnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("PurchaseProducts", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.Purchases", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PurchaseID"));

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalPointsSpent")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseID");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("SponsorID", "UserID");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.SponsorDrivers", b =>
                {
                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<decimal>("DriverPointValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(1m)
                        .HasComment("Custom point value for driver under this sponsor");

                    b.Property<int>("MilestoneLevel")
                        .HasColumnType("int")
                        .HasComment("Optional milestone level for tracking performance");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Points specific to this sponsor");

                    b.HasKey("SponsorID", "UserID");

                    b.HasIndex("UserID", "SponsorID")
                        .HasDatabaseName("IX_SponsorDrivers_DriverSponsor");

                    b.ToTable("SponsorDrivers", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.SponsorUsers", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("SponsorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if this user is the primary sponsor representative.");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Date the user joined the sponsor organization.");

                    b.HasKey("UserID", "SponsorID");

                    b.HasIndex("SponsorID", "IsPrimary")
                        .HasDatabaseName("IX_SponsorUsers_SponsorPrimary");

                    b.ToTable("SponsorUsers", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.Sponsors", b =>
                {
                    b.Property<int>("SponsorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SponsorID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("Name of the sponsor company");

                    b.Property<int>("MilestoneThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("If milestones aren't enabled the value is 0");

                    b.Property<decimal>("PointDollarValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.01m)
                        .HasComment("Dollar value of one point, default is 0.01 USD");

                    b.Property<string>("SponsorType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("Defines the type of sponsor (Logistics, Trucking, etc.)");

                    b.HasKey("SponsorID");

                    b.ToTable("Sponsors", (string)null);

                    b.HasData(
                        new
                        {
                            SponsorID = 1,
                            CompanyName = "TruckMasters Inc.",
                            MilestoneThreshold = 0,
                            PointDollarValue = 0.05m,
                            SponsorType = "Trucking"
                        },
                        new
                        {
                            SponsorID = 2,
                            CompanyName = "LogiPro Solutions",
                            MilestoneThreshold = 0,
                            PointDollarValue = 0.02m,
                            SponsorType = "Logistics"
                        },
                        new
                        {
                            SponsorID = 3,
                            CompanyName = "FleetForce Partners",
                            MilestoneThreshold = 0,
                            PointDollarValue = 0.01m,
                            SponsorType = "Fleeting"
                        });
                });

            modelBuilder.Entity("Backend_Server.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NotifyPref")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("None");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfileImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .IsFixedLength()
                        .HasComment("Two-character state abbreviation (ex. SC for South Carolina)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sponsor",
                            NormalizedName = "SPONSOR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "ManageUsers",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "CanImpersonate",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "ViewReports",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "ViewAuditLogs",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "ManageCatalog",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "ManageApplications",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "ManageDrivers",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "CanImpersonate",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "ViewReports",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "ViewAuditLogs",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "RedeemPoints",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "RedeemPoints",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend_Server.Models.AccountActivity", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.AuditLogs", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.Authentications", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.DriverApplications", b =>
                {
                    b.HasOne("Backend_Server.Models.SponsorDrivers", "SponsorDriver")
                        .WithMany()
                        .HasForeignKey("SponsorID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SponsorDriver");
                });

            modelBuilder.Entity("Backend_Server.Models.NotificationHistory", b =>
                {
                    b.HasOne("Backend_Server.Models.NotifyTypes", "NotifyTypes")
                        .WithMany()
                        .HasForeignKey("NotifyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_NotificationHistory_NotifyTypes");

                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationHistory_Users");

                    b.Navigation("NotifyTypes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.PointTransactions", b =>
                {
                    b.HasOne("Backend_Server.Models.SponsorDrivers", "SponsorDriver")
                        .WithMany()
                        .HasForeignKey("SponsorID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SponsorDriver");
                });

            modelBuilder.Entity("Backend_Server.Models.Products", b =>
                {
                    b.HasOne("Backend_Server.Models.Sponsors", null)
                        .WithMany()
                        .HasForeignKey("SponsorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Sponsors");
                });

            modelBuilder.Entity("Backend_Server.Models.PurchaseProducts", b =>
                {
                    b.HasOne("Backend_Server.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Server.Models.Purchases", "Purchase")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Backend_Server.Models.Purchases", b =>
                {
                    b.HasOne("Backend_Server.Models.SponsorDrivers", "SponsorDriver")
                        .WithMany("Purchases")
                        .HasForeignKey("SponsorID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SponsorDriver");
                });

            modelBuilder.Entity("Backend_Server.Models.SponsorDrivers", b =>
                {
                    b.HasOne("Backend_Server.Models.Sponsors", "Sponsor")
                        .WithMany("SponsorDrivers")
                        .HasForeignKey("SponsorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SponsorDrivers_Sponsor");

                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany("SponsorDrivers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SponsorDrivers_Driver");

                    b.Navigation("Sponsor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.SponsorUsers", b =>
                {
                    b.HasOne("Backend_Server.Models.Sponsors", "Sponsor")
                        .WithMany("SponsorUsers")
                        .HasForeignKey("SponsorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SponsorUsers_Sponsor");

                    b.HasOne("Backend_Server.Models.Users", "User")
                        .WithMany("SponsorUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SponsorUsers_User");

                    b.Navigation("Sponsor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_Server.Models.Users", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Server.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Backend_Server.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend_Server.Models.Purchases", b =>
                {
                    b.Navigation("PurchaseProducts");
                });

            modelBuilder.Entity("Backend_Server.Models.SponsorDrivers", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Backend_Server.Models.Sponsors", b =>
                {
                    b.Navigation("SponsorDrivers");

                    b.Navigation("SponsorUsers");
                });

            modelBuilder.Entity("Backend_Server.Models.Users", b =>
                {
                    b.Navigation("SponsorDrivers");

                    b.Navigation("SponsorUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
